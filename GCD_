import java.util.Scanner;

// Java implementation of above algorithm
class abc1
{
    static final int MAXFACTORS = 1024 ;

    // class to store factorization
// of m and n
    static class FACTORIZATION
    {
        int size;
        int factor[] = new int[MAXFACTORS + 1];
        int exponent[] = new int[MAXFACTORS + 1];

    }


    static void FindFactorization(int x, FACTORIZATION
            factorization)
    {
        int i, j = 1;
        int n = x, c = 0;
        int k = 1;
        factorization.factor[0] = 1;
        factorization.exponent[0] = 1;

        for (i = 2; i <= n; i++)
        {
            c = 0;

            while (n % i == 0)
            {
                c++;

                // factorization.factor[j]=i;
                n = n / i;
                // j++;
            }

            if (c > 0)
            {
                factorization.exponent[k] = c;
                factorization.factor[k] = i;
                k++;
            }
        }

        factorization.size = k - 1;
    }

    // Function to print the factors
    static void DisplayFactorization(int x, FACTORIZATION
            factorization)
    {
        int i;
        System.out.print("Prime factor of " + x + " = ");

        for (i = 0;
             i <= factorization.size; i++)
        {

            System.out.print(factorization.factor[i]);

            if (factorization.exponent[i] > 1)
                System.out.print( "^" +
                        factorization.exponent[i]);

            if (i < factorization.size)
                System.out.print("*");

            else
                System.out.println( );
        }
    }

    // function to find the gcd
// using Middle School procedure
    static int gcdMiddleSchoolProcedure(int m, int n)
    {

        FACTORIZATION mFactorization = new FACTORIZATION();
        FACTORIZATION nFactorization = new FACTORIZATION();

        int r, mi, ni, i, k, x = 1, j;

        // Step 1.
        FindFactorization(m, mFactorization);
        DisplayFactorization(m, mFactorization);

        // Step 2.
        FindFactorization(n, nFactorization);
        DisplayFactorization(n, nFactorization);

        // Steps 3 and 4.
        // Procedure algorithm for computing the
        // greatest common divisor.
        int min;
        i = 1;
        j = 1;
        while (i <= mFactorization.size &&
                j <= nFactorization.size)
        {
            if (mFactorization.factor[i] <
                    nFactorization.factor[j])
                i++;

            else if (nFactorization.factor[j] <
                    mFactorization.factor[i])
                j++;

            else /* if arr1[i] == arr2[j] */
            {
                min = mFactorization.exponent[i] >
                        nFactorization.exponent[j] ?
                        nFactorization.exponent[j] :
                        mFactorization.exponent[i];

                x = x * mFactorization.factor[i] * min;
                i++;
                j++;
            }
        }

        return x;
    }

    // Driver code
    public static void main(String args[])
    {
        Scanner in = new Scanner(System.in);
        int m , n;
        System.out.println("Enter m and n :");
        m=in.nextInt();
        n=in.nextInt();
        System.out.println("Sieve of Eratosthenes");
        System.out.println("2005638");
        System.out.print("GCD(" + m + ", " + n + ") = " +
                gcdMiddleSchoolProcedure(m, n));
    }
}
 
